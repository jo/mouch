#!/usr/bin/env ruby
# Mouch - couch app purism
# (c) 2011 Johannes J. Schmidt, TF
#
# This command pushes the application, described via APP file or commandline stream
# to the database specified via URL parameter.
# 
# Usage:
#   ./push APP URL [URL1,URL2...]
require 'tempfile'
require 'json'

BATCH_SIZE = 100

urls = []

# remove all urls from arguments
while ARGV.length > 1
  urls << ARGV.pop.sub(/\/$/, '')
end

# get app from commandline
APP = JSON.parse ARGF.read
APP.freeze

def display_response response
  response.each do |key, value|
    STDERR.puts '  %s: %s' % [key, value]
  end
end

def spinner number, total
  if total < 10
    STDERR.print "%d %s pushed" % [number, number === 1 ? 'doc' : 'docs']
    return
  end
  STDERR.print "\r"
  STDERR.print "%.2f%% (%d/%d)" % [number*100.0/total, number, total]
end

def push url
  # check database / server
  info = `curl --insecure -s -XGET #{url} -H 'Content-Type:application/json'`
  begin
    info = JSON.parse info
  rescue JSON::ParserError
    STDERR.puts "Error: Can't connect to CouchDB server"
    exit
  end
  if info["error"]
    STDERR.puts "Error: Can't connect to database"
    display_response info
    exit
  end

  STDERR.puts '* pushing %s' % url

  app = APP.dup

  cnt = 0
  total = app['docs'].length
  # push app in batches
  app['docs'].each_slice(BATCH_SIZE) do |apps|
    docs = {}
    apps.each { |doc| docs[doc['_id']] = doc }

    # get revs
    file = Tempfile.new('ids.json')
    current = {}
    keys = apps.map { |d| d['_id'] }.compact

    if keys.length > 0
      begin
        file << { "keys" => keys }.to_json
        file.rewind
        current = `curl --insecure -s -XPOST #{url}/_all_docs -H 'Content-Type:application/json' -d@'#{file.path}'`
        begin
          current = JSON.parse current
        rescue JSON::ParserError
          STDERR.puts "Error: Can't connect to CouchDB server"
          exit
        end

        # check response
        if current["error"]
          STDERR.puts "Error: Failed to fetch revisions"
          display_response current
          exit
        end
      ensure
        file.close
      end

      # parse response
      if current['rows']
        current['rows'].each do |row|
          doc = docs[row['id']]
          doc['_rev'] = row['value']['rev'] if doc
        end
      end
    end

    # push app
    file = Tempfile.new('app.json')
    begin
      file << { "docs" => apps }.to_json
      file.rewind
      response = `curl --insecure -s -XPOST #{url}/_bulk_docs -d@'#{file.path}' -H 'Content-Type: application/json'`

      begin
        response = JSON.parse response
      rescue JSON::ParserError
        STDERR.puts "Error: Can't connect to CouchDB server"
        exit
      end

      # check response
      response.each do |resp|
        if resp["error"]
          STDERR.puts "Error: Failed to push app " + resp["id"]
          display_response resp
          exit
        end
      end
    ensure
      file.close!
    end

    cnt += docs.length
    spinner cnt, total
  end

  STDERR.puts
end

urls.each do |url|
  push url
end
